USE ecommerce;
SET GLOBAL net_read_timeout = 600;
SET GLOBAL net_write_timeout = 600;
SET GLOBAL wait_timeout = 600;

#  List all unique cities where customers are located.
SELECT DISTINCT(customer_city) 
FROM customers;

# Count the number of orders placed in 2017.
SELECT COUNT(order_id) 
FROM orders 
WHERE YEAR(order_purchase_timestamp) = 2017;

# Find the total sales per category.
SELECT product_category, ROUND(SUM(payment_value),2)
FROM products 
JOIN order_items 
ON products.product_id = order_items.product_id
JOIN payments 
ON payments.order_id = order_items.order_id
GROUP BY product_category;

#  Calculate the percentage of orders that were paid in installments.
SELECT (SUM(CASE WHEN payment_installments >=1 THEN 1 ELSE 0 END )*100 )/COUNT(*) AS percentage_installments
FROM payments;

# Count the number of customers from each state. 
SELECT COUNT(DISTINCT customer_unique_id), customer_state
FROM customers
GROUP BY customer_state;

# Calculate the number of orders per month in 2018.
SELECT MONTH(order_purchase_timestamp) Months_2018, MONTHNAME(order_purchase_timestamp) Month_name,
COUNT(order_id) Number_Of_Orders
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp) , Month_name
ORDER BY Months_2018 ;

# Find the average number of products per order, grouped by customer city.
WITH orders_count AS (
SELECT orders.order_id, orders.customer_id, COUNT(order_items.product_id) AS cProducts
FROM orders 
JOIN order_items
ON orders.order_id = order_items.order_id
GROUP BY orders.order_id, orders.customer_id )
SELECT customer_city, AVG(cProducts)
FROM customers 
JOIN orders_count
ON customers.customer_id = orders_count.customer_id
GROUP BY customer_city;

# Calculate the percentage of total revenue contributed by each product category.
SELECT 
  product_category,
  SUM(payment_value) * 100.0 / 
    (SELECT SUM(payment_value) FROM payments) AS percentage_value
FROM products 
JOIN order_items  ON products.product_id = order_items.product_id
JOIN payments  ON payments.order_id = order_items.order_id
GROUP BY product_category;

# Identify the correlation between product price and the number of times a product has been purchased.
SELECT product_category,order_items.product_id, AVG(price), COUNT(order_item_id)
FROM order_items 
JOIN orders 
ON order_items.order_id = orders.order_id 
JOIN products 
ON products.product_id = order_items.product_id
GROUP BY product_category, order_items.product_id;

# Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT seller_id, SUM(payment_value) Total_Revenue, 
RANK() OVER(ORDER BY SUM(payment_value) DESC)
FROM payments
JOIN order_items ON payments.order_id = order_items.order_id
GROUP BY seller_id;

# Calculate the moving average of order values for each customer over their order history.
SELECT customer_id, pValue, AVG(pValue) OVER(PARTITION BY customer_id ORDER BY order_purchase_timestamp
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS mov_avg
FROM 
(SELECT customer_id, payment_value AS pValue , order_purchase_timestamp
FROM orders 
JOIN payments 
ON orders.order_id = payments.order_id) AS z;

# Calculate the cumulative sales per month for each year.
SELECT years, month, month_name, total_value, SUM(total_value) 
OVER(PARTITION BY years ORDER BY month) AS cumulative_sales
FROM 
(SELECT YEAR(order_purchase_timestamp) years ,MONTH(order_purchase_timestamp) month, MONTHNAME(order_purchase_timestamp) AS month_name,
SUM(payment_value) total_value
FROM orders
JOIN payments 
ON payments.order_id = orders.order_id 
GROUP BY years,month,month_name
)AS monthly_sales;

# Calculate the year-over-year growth rate of total sales.
SELECT years, total_sales,
(total_sales - lag(total_sales,1) OVER(ORDER BY years))*100.0/ lag(total_sales,1) OVER(ORDER BY years) AS rate
FROM (
SELECT YEAR(order_purchase_timestamp) years,SUM(payment_value) AS total_sales
FROM orders
JOIN payments
ON orders.order_id = payments.order_id
GROUP BY YEAR(order_purchase_timestamp)
) AS a;

/* Calculate the retention rate of customers, defined as the percentage of customers 
 who make another purchase within 6 months of their first purchase. */

WITH first_purchase AS (
 SELECT customer_id, MIN(order_purchase_timestamp) As first_purchase_date
 FROM orders
 GROUP BY customer_id
 ),
 next_purchase AS (
 SELECT customer_id , first_purchase_date, order_purchase_timestamp
 FROM orders o
 JOIN first_purchase f
 ON o.customer_id = f.customer_id
 WHERE o.order_purchase_timestamp > f.first_purchase_date 
 AND o.order_purchase_timestamp <= DATE_ADD(f.first_purchase_date, INTERVAL 6 MONTH)
 ) 
 SELECT COUNT(DISTINCT next_purchase.customer_id )*100 / COUNT(first_purchase.customer_id)
 FROM first_purchase 
 LEFT JOIN next_purchase
 ON next_purchase.customer_id = first_purchase.customer_id;
 
 # Identify the top 3 customers who spent the most money in each year.
WITH total_year_spent AS (
 SELECT YEAR(purchase_timestamp) years, customer_id, SUM(payment_value) total_spent,
 DENSE_RANK() OVER(PARTITION BY YEAR(purchase_timestamp)  ORDER BY SUM(payment_value) DESC) AS d_rank
 FROM orders
 JOIN payments 
 ON orders.order_id = payments.order_id
 GROUP BY customer_id, YEAR(purchase_timestamp))
 SELECT years, customer_id, total_spent 
 FROM total_year_spent 
 WHERE d_rank <=3;


